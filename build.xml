<project name="plovr" basedir="." default="build">

  <property file="${basedir}/build.properties" />
  <property file="${basedir}/default.build.properties" />

  <property name="src.dir" value="${basedir}/src" />
  <property name="test.dir" value="${basedir}/test" />
	<property name="testdata.dir" value="${basedir}/testdata" />
  <property name="www.dir" value="${basedir}/www" />
  <property name="demo.dir" value="${www.dir}/demo" />
  <property name="lib.dir" value="${basedir}/lib" />
  <property name="build.dir" value="${basedir}/build" />
  <property name="classes.dir" value="${build.dir}/classes" />
  <property name="build.dir.www" value="${build.dir}/www" />
	<property name="javadoc.dir" value="${build.dir.www}/javadoc" />

  <!-- In order to build the jar, each of the Closure Tools must be          -->
  <!-- checked out in a parallel directory.                                  -->
  <property name="closure-compiler.dir" value="${basedir}/../closure-compiler" />
  <property name="closure-library.dir" value="${basedir}/../closure-library" />
  <property name="closure-templates.dir" value="${basedir}/../closure-templates" />

  <path id="plovr.classpath">
    <fileset dir="${lib.dir}" includes="*.jar" />
    <pathelement location="${classes.dir}" />
    <!-- Include src.dir to include resources, such as modules.soy -->
    <pathelement location="${src.dir}" />
  </path>

  <target name="clean" description="remove all generated files">
    <delete dir="${build.dir}" />
  </target>

  <target name="compile" description="compile Java source code">
    <mkdir dir="${classes.dir}" />
    <javac srcdir="${src.dir}"
           destdir="${classes.dir}"
           classpathref="plovr.classpath"
           debug="on"
           >
    </javac>
    <javac srcdir="${test.dir}"
           destdir="${classes.dir}"
           classpathref="plovr.classpath"
           debug="on"
           >
    </javac>
  </target>

  <target name="test"
          depends="compile,externs"
          description="run the unit tests">
    <junit failureproperty="hasFailingTests"
           showoutput="true">

      <formatter type="plain" usefile="false" />

      <batchtest fork="yes">
        <fileset dir="${test.dir}">
          <include name="**/*Test*.java" />
        </fileset>
      </batchtest>
      <classpath refid="plovr.classpath"></classpath>
    </junit>
    <fail if="hasFailingTests" />
  </target>

  <target name="externs">
    <mkdir dir="${classes.dir}" />
    <exec executable="sh"
          output="${classes.dir}/externs_manifest.txt"
          failonerror="true">
      <arg value="${basedir}/listfiles.sh" />
      <arg value="${closure-compiler.dir}/externs" />
    </exec>
  </target>

  <target name="library">
    <mkdir dir="${classes.dir}" />
    <exec executable="sh"
          output="${classes.dir}/library_manifest.txt"
          failonerror="true">
      <arg value="${basedir}/listfiles.sh" />
      <arg value="${closure-library.dir}/closure/goog" />
    </exec>
  </target>

  <target name="third_party">
    <mkdir dir="${classes.dir}" />
    <exec executable="sh"
          output="${classes.dir}/third_party_manifest.txt"
          failonerror="true">
      <arg value="${basedir}/listfiles.sh" />
      <arg value="${closure-library.dir}/third_party/closure/goog" />
    </exec>
  </target>

  <target name="jar"
          depends="compile, externs, library, third_party"
          description="build plovr.jar">
    <mkdir dir="${build.dir}" />
    <copy todir="${classes.dir}/org/plovr">
      <fileset dir="${src.dir}/org/plovr">
        <include name="*.js" />
        <include name="*.soy" />
      </fileset>
    </copy>
    <jar destfile="${build.dir}/plovr.jar">
      <zipfileset dir="${closure-compiler.dir}/externs/"
                  includes="**/*.js"
                  prefix="externs"
                  />
      <zipfileset dir="${closure-library.dir}/closure/goog/"
                  includes="**/*.js"
                  excludes="deps.js"
                  prefix="closure/goog"
                  />
      <zipfileset dir="${closure-library.dir}/third_party/closure/goog/"
                  includes="**/*.js"
                  excludes="deps.js"
                  prefix="third_party/closure/goog"
                  />
      <zipfileset dir="${closure-templates.dir}/javascript/"
                  includes="soyutils_usegoog.js"
                  prefix="soy" />
      <zipgroupfileset dir="${lib.dir}" includes="*.jar" />
      <fileset dir="${classes.dir}" />
      <manifest>
        <attribute name="Main-Class" value="org.plovr.cli.Main" />
      </manifest>
    </jar>
  </target>

  <target name="integration-test"
          depends="jar"
          description="builds the jar and runs it on localhost:9818">
    <echo>Visit http://localhost:9818/compile?id=integration-test</echo>
    <java jar="${build.dir}/plovr.jar" fork="true">
      <arg value="serve" />
      <arg line="--port 9818" />
      <arg value="${testdata.dir}/example/integration-test-config.js" />
      <arg value="${testdata.dir}/modules/plovr-config.js" />
      <jvmarg value="-Xdebug" />
      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000"/>
    </java>
  </target>

  <target name="test-soyweb-server"
          description="runs the soyweb server in debug mode on localhost:9811">
    <echo>Visit http://localhost:9811/hello</echo>
    <java jar="${build.dir}/plovr.jar" fork="true">
      <jvmarg value="-Xdebug" />
      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000"/>
      <arg value="soyweb" />
      <arg line="--dir ${testdata.dir}/soy-server" />
    </java>
  </target>

	<target name="generate-options-documentation"
	        description="generates the documentation for ConfigOption.java"
		      depends="compile">
		<mkdir dir="${build.dir.www}" />
    <java fork="true"
    	    classname="org.plovr.ConfigOptionDocumentationGenerator"
    	    output="${build.dir.www}/options.html"
          failonerror="true"
          logerror="true"
    	    >
      <classpath refid="plovr.classpath"></classpath>
   </java>
	</target>

  <target name="develop-documentation"
          description="runs the soyweb server in debug mode to develop docs">
    <echo>Visit http://localhost:9811/</echo>
    <java jar="${build.dir}/plovr.jar" fork="true">
      <jvmarg value="-Xdebug" />
      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000"/>
      <arg value="soyweb" />
      <arg line="--dir ${www.dir}" />
      <arg line="--globals ${basedir}/www-globals.js" />
    </java>
  </target>

  <target name="javadoc">
    <mkdir dir="${javadoc.dir}" />
    <javadoc sourcepath="${src.dir}"
             destdir="${javadoc.dir}"
             protected="true"
             windowtitle="plovr"
             classpathref="plovr.classpath"
             >
      <link href="http://download.oracle.com/javase/6/docs/api/" />
      <link href="http://guava-libraries.googlecode.com/svn/trunk/javadoc/" />
      <link href="http://google-gson.googlecode.com/svn/tags/1.5/docs/javadocs/" />
      <link href="http://closure-compiler.googlecode.com/svn/trunk/javadoc/" />
      <link href="http://closure-templates.googlecode.com/svn/trunk/javadoc-complete/" />
    </javadoc>
  </target>

  <target name="serve-prod-documentation"
          description="runs the soyweb server on plovr.com to serve the docs"
          depends="generate-options-documentation, javadoc, jar">
    <mkdir dir="${build.dir.www}" />
    <copy todir="${build.dir.www}">
      <fileset dir="${www.dir}" includes="**/*" />
    </copy>
    <java jar="${build.dir}/plovr.jar" fork="true">
      <arg value="soyweb" />
      <arg line="--dir ${build.dir.www}" />
      <arg line="--static" />
      <arg line="--globals ${basedir}/prod-globals.js" />
    </java>
  </target>

  <target name="run-demo" description="runs the demo">
    <available file="${build.dir}/plovr.jar"
               type="file"
               property="jar.present"
               />
    <fail unless="jar.present">
      The plovr jar has not been built. Run "ant jar" to build it.
    </fail>

    <java jar="${build.dir}/plovr.jar"
          dir="${demo.dir}"
          fork="true">
      <arg value="serve" />
      <arg value="${demo.dir}/demo-config.js" />
    </java>

  </target>

  <target name="build" depends="jar" />

</project>
